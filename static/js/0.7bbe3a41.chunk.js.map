{"version":3,"sources":["../node_modules/matter-js/build/matter.js"],"names":["factory","modules","installedModules","__webpack_require__","moduleId","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Common","_nextId","_seed","_nowStartTime","Date","_warnedOnce","_decomp","extend","obj","deep","argsStart","deepClone","arguments","length","source","prop","constructor","clone","keys","push","values","path","begin","end","split","slice","set","val","parts","shuffle","array","j","Math","floor","random","temp","choose","choices","isElement","HTMLElement","nodeType","nodeName","isArray","toString","isFunction","isPlainObject","isString","clamp","min","max","sign","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","concat","Array","info","warn","warnOnce","message","join","deprecated","warning","chain","nextId","indexOf","haystack","needle","map","list","func","mapped","topologicalSort","graph","result","visited","node","_topologicalSort","neighbors","neighbor","funcs","_chained","lastResult","args","chainPathBefore","base","chainPathAfter","setDecomp","decomp","getDecomp","global","e","Bounds","vertices","bounds","x","y","update","velocity","Infinity","vertex","contains","point","overlaps","boundsA","boundsB","translate","vector","shift","position","deltaX","deltaY","Vector","magnitude","sqrt","magnitudeSquared","rotate","angle","output","cos","sin","rotateAbout","normalise","dot","vectorA","vectorB","cross","cross3","vectorC","add","sub","mult","scalar","div","perp","negate","neg","atan2","_temp","Vertices","points","body","index","isInternal","fromPath","match","parseFloat","centre","area","mean","average","signed","abs","inertia","mass","numerator","denominator","v","vertice","dx","dy","nextVertice","scale","scaleX","scaleY","delta","chamfer","radius","quality","qualityMin","qualityMax","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","pow","radiusVector","midNormal","scaledVertex","precision","theta","acos","clockwiseSort","sort","vertexA","vertexB","isConvex","k","z","flag","hull","upper","lower","pop","Events","on","eventNames","callback","names","events","off","callbacks","newCallbacks","trigger","event","eventClone","Composite","Body","options","id","type","parent","isModified","bodies","constraints","composites","label","plugin","setModified","composite","updateParents","updateChildren","childComposite","objects","addBody","addConstraint","addComposite","constraint","remove","removeBody","removeConstraint","removeComposite","compositeA","compositeB","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","isStatic","allBodies","allConstraints","allComposites","move","rebase","translation","recursive","rotation","setPosition","Sleeping","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","strokeStyle","fillStyle","lineWidth","sprite","xScale","yScale","xOffset","yOffset","circleRadius","positionPrev","anglePrev","axes","_original","_initProperties","nextGroup","isNonColliding","nextCategory","defaultFillStyle","defaultStrokeStyle","defaultLineWidth","settings","setStatic","setMass","setDensity","setInertia","setVertices","setAngle","setVelocity","setAngularVelocity","setParts","setCentre","part","inverseMass","inverseInertia","moment","fromVertices","autoHull","hullCentre","total","_totalProperties","relative","totalArea","totalInertia","deltaTime","correction","deltaTimeSquared","velocityPrevX","velocityPrevY","applyForce","offset","properties","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","afterCollisions","pairs","pair","isActive","collision","bodyA","bodyB","sleepingBody","movingBody","wasSleeping","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","impulse","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","share","normal","normalVelocity","relativeVelocity","difference","massTotal","resistanceTotal","zero","postSolveAll","Pair","Contact","timestamp","parentA","parentB","contacts","activeContacts","separation","confirmedActive","timeCreated","timeUpdated","supports","collided","support","contactId","contact","depth","setActive","gradient","toFixed","xx","axis","Bodies","rectangle","width","height","trapezoid","slope","verticesPath","x1","x2","x3","circle","maxSides","sides","ceil","polygon","PI","yy","vertexSets","flagInternal","removeCollinear","minimumArea","removeDuplicatePoints","canDecomp","Boolean","quickDecomp","concave","makeCCW","removeCollinearPoints","decomposed","chunkVertices","partA","partB","pav","pbv","da","db","Mouse","element","mouse","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","button","pixelRatio","getAttribute","sourceEvents","mousemove","mousedown","mouseup","mousewheel","_getRelativeMousePosition","changedTouches","preventDefault","detail","setElement","addEventListener","clearSourceEvents","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","touches","pageX","left","pageY","top","clientWidth","clientHeight","Detector","SAT","collisions","broadphasePairs","engine","pairsTable","table","canCollide","previousCollision","collides","filterA","filterB","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","tangent","penetration","verticesB","_findSupports","verticesA","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","distance","nearestDistance","vertexToBody","bodyAPosition","Plugin","_registry","register","isPlugin","registered","pluginVersion","versionParse","version","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","used","isFor","parsed","for","versionSatisfies","use","plugins","uses","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","pattern","exec","major","minor","patch","isRange","operator","prerelease","Render","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","_goodFps","_goodDelta","controller","canvas","frameRequestId","timing","historySize","deltaHistory","lastTime","lastTimestamp","lastElapsed","timestampElapsed","timestampElapsedHistory","engineDeltaHistory","engineElapsedHistory","elapsedHistory","background","wireframeBackground","hasBounds","enabled","wireframes","showSleeping","showDebug","showStats","showPerformance","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","run","loop","time","_updateTiming","world","stats","stop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","setTransform","endViewTransform","startTime","currentBackground","_applyBackground","globalCompositeOperation","fillRect","enableSleeping","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","grid","sections","font","textBaseline","textAlign","section","fillText","lastEngineDelta","lastDelta","deltaMean","_mean","elapsedMean","engineDeltaMean","engineElapsedMean","rateMean","fps","gap","round","count","indicator","plotY","beginPath","moveTo","lineTo","stroke","start","arc","closePath","coils","fill","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","bucketKeys","buckets","bucketId","region","bucketWidth","bucketHeight","inspector","selected","item","data","setLineDash","selectStart","selectBounds","unshift","createElement","oncontextmenu","onselectstart","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","normalImpulse","tangentImpulse","Engine","Resolver","Pairs","Grid","positionIterations","velocityIterations","constraintIterations","gravity","broadphase","metrics","gridPairs","_bodiesApplyGravity","_bodiesUpdate","pairsList","removeOld","collisionStart","preSolvePosition","solvePosition","postSolvePosition","preSolveVelocity","solveVelocity","collisionActive","collisionEnd","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","activeCount","bodyBtoA","contactShare","tempA","tempB","tempC","tempD","contactVertex","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","velocityPointB","tangentVelocity","tangentSpeed","tangentVelocityDirection","normalForce","maxFriction","oAcN","oBcN","contactNormalImpulse","contactTangentImpulse","_pairMaxIdleLife","pairId","pairIndex","indexesToRemove","forceUpdate","col","row","bucket","gridChanged","newRegion","_getRegion","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","column","pairKeys","Matter","Composites","MouseConstraint","Query","Runner","Svg","World","before","after","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","mouseConstraint","_triggerEvents","mouseEvents","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","_frameTimeout","clearTimeout","runner","deltaSampleSize","counterTimestamp","frameCounter","timePrev","timeScalePrev","isFixed","deltaMin","deltaMax","tick","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag"],"mappings":"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","file":"static/js/0.7bbe3a41.chunk.js","sourcesContent":["/*!\n * matter-js 0.17.1 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 22);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Render = __webpack_require__(16);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(10);\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = __webpack_require__(4);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(10);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n        };\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(17);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = __webpack_require__(14);\nvar Pair = __webpack_require__(9);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(5);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(4);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(12);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase)\n            Render.grid(render, engine.grid, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                grid.bucketWidth,\n                grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(19);\nvar Detector = __webpack_require__(13);\nvar Pairs = __webpack_require__(20);\nvar Grid = __webpack_require__(21);\nvar Events = __webpack_require__(4);\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            grid: null,\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.grid = Grid.create(options.grid || options.broadphase);\n        engine.pairs = Pairs.create();\n\n        // temporary back compatibility\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        var startTime = Common.now();\n\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            grid = engine.grid,\n            gridPairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n        timing.lastDelta = delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n\n        // if world is dirty, we must flush the whole grid\n        if (world.isModified)\n            Grid.clear(grid);\n\n        // update the grid buckets based on current bodies\n        Grid.update(grid, allBodies, engine, world.isModified);\n        gridPairs = grid.pairsList;\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = Detector.collisions(gridPairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world,\n            bodies = Composite.allBodies(world);\n\n        Pairs.clear(engine.pairs);\n        Grid.clear(engine.grid);\n        Grid.update(engine.grid, bodies, engine, true);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     *\n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     *\n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated use `engine.grid`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * The gravity to apply on all bodies in `engine.world`.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                Vector.add(bodyA.positionImpulse, \n                    Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pairsList[i].confirmedActive = false;\n        }\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                    pair.confirmedActive = true;\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && !pair.confirmedActive) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(23);\r\n\r\nMatter.Axes = __webpack_require__(10);\r\nMatter.Bodies = __webpack_require__(11);\r\nMatter.Body = __webpack_require__(6);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(5);\r\nMatter.Composites = __webpack_require__(24);\r\nMatter.Constraint = __webpack_require__(8);\r\nMatter.Contact = __webpack_require__(17);\r\nMatter.Detector = __webpack_require__(13);\r\nMatter.Engine = __webpack_require__(18);\r\nMatter.Events = __webpack_require__(4);\r\nMatter.Grid = __webpack_require__(21);\r\nMatter.Mouse = __webpack_require__(12);\r\nMatter.MouseConstraint = __webpack_require__(25);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(20);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(26);\r\nMatter.Render = __webpack_require__(16);\r\nMatter.Resolver = __webpack_require__(19);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(14);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(28);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(29);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.17.1\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bodies = __webpack_require__(11);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(12);\nvar Events = __webpack_require__(4);\nvar Detector = __webpack_require__(13);\nvar Constraint = __webpack_require__(8);\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar SAT = __webpack_require__(14);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(11);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(4);\nvar Engine = __webpack_require__(18);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        Events.trigger(runner, 'afterTick', event);\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});"],"sourceRoot":""}